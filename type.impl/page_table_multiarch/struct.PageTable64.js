(function() {
    var type_impls = Object.fromEntries([["page_table_multiarch",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-PageTable64%3CM,+PTE,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#547-562\">Source</a><a href=\"#impl-Drop-for-PageTable64%3CM,+PTE,+H%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"page_table_multiarch/trait.PagingMetaData.html\" title=\"trait page_table_multiarch::PagingMetaData\">PagingMetaData</a>, PTE: <a class=\"trait\" href=\"page_table_entry/trait.GenericPTE.html\" title=\"trait page_table_entry::GenericPTE\">GenericPTE</a>, H: <a class=\"trait\" href=\"page_table_multiarch/trait.PagingHandler.html\" title=\"trait page_table_multiarch::PagingHandler\">PagingHandler</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"page_table_multiarch/struct.PageTable64.html\" title=\"struct page_table_multiarch::PageTable64\">PageTable64</a>&lt;M, PTE, H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#548-561\">Source</a><a href=\"#method.drop\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","page_table_multiarch::arch::x86_64::X64PageTable","page_table_multiarch::arch::riscv::Sv39PageTable","page_table_multiarch::arch::riscv::Sv48PageTable","page_table_multiarch::arch::aarch64::A64PageTable","page_table_multiarch::arch::loongarch64::LA64PageTable"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PageTable64%3CM,+PTE,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#35-357\">Source</a><a href=\"#impl-PageTable64%3CM,+PTE,+H%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;M: <a class=\"trait\" href=\"page_table_multiarch/trait.PagingMetaData.html\" title=\"trait page_table_multiarch::PagingMetaData\">PagingMetaData</a>, PTE: <a class=\"trait\" href=\"page_table_entry/trait.GenericPTE.html\" title=\"trait page_table_entry::GenericPTE\">GenericPTE</a>, H: <a class=\"trait\" href=\"page_table_multiarch/trait.PagingHandler.html\" title=\"trait page_table_multiarch::PagingHandler\">PagingHandler</a>&gt; <a class=\"struct\" href=\"page_table_multiarch/struct.PageTable64.html\" title=\"struct page_table_multiarch::PageTable64\">PageTable64</a>&lt;M, PTE, H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#39-47\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.try_new\" class=\"fn\">try_new</a>() -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new page table instance or returns the error.</p>\n<p>It will allocate a new page for the root page table.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root_paddr\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#50-52\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.root_paddr\" class=\"fn\">root_paddr</a>(&amp;self) -&gt; PhysAddr</h4></section></summary><div class=\"docblock\"><p>Returns the physical address of the root page table.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#63-78\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.map\" class=\"fn\">map</a>(\n    &amp;mut self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n    target: PhysAddr,\n    page_size: <a class=\"enum\" href=\"page_table_multiarch/enum.PageSize.html\" title=\"enum page_table_multiarch::PageSize\">PageSize</a>,\n    flags: <a class=\"struct\" href=\"page_table_entry/struct.MappingFlags.html\" title=\"struct page_table_entry::MappingFlags\">MappingFlags</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;<a class=\"struct\" href=\"page_table_multiarch/struct.TlbFlush.html\" title=\"struct page_table_multiarch::TlbFlush\">TlbFlush</a>&lt;M&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Maps a virtual page to a physical frame with the given <code>page_size</code>\nand mapping <code>flags</code>.</p>\n<p>The virtual page starts with <code>vaddr</code>, and the physical frame starts with\n<code>target</code>. If the <code>target</code> is not aligned to the <code>page_size</code>, it will be\naligned down automatically.</p>\n<p>Returns <a href=\"page_table_multiarch/enum.PagingError.html#variant.AlreadyMapped\" title=\"variant page_table_multiarch::PagingError::AlreadyMapped\"><code>Err(PagingError::AlreadyMapped)</code></a>\nif the mapping is already present.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remap\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#87-97\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.remap\" class=\"fn\">remap</a>(\n    &amp;mut self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n    paddr: PhysAddr,\n    flags: <a class=\"struct\" href=\"page_table_entry/struct.MappingFlags.html\" title=\"struct page_table_entry::MappingFlags\">MappingFlags</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;(<a class=\"enum\" href=\"page_table_multiarch/enum.PageSize.html\" title=\"enum page_table_multiarch::PageSize\">PageSize</a>, <a class=\"struct\" href=\"page_table_multiarch/struct.TlbFlush.html\" title=\"struct page_table_multiarch::TlbFlush\">TlbFlush</a>&lt;M&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Remap the mapping starts with <code>vaddr</code>, updates both the physical address\nand flags.</p>\n<p>Returns the page size of the mapping.</p>\n<p>Returns <a href=\"page_table_multiarch/enum.PagingError.html#variant.NotMapped\" title=\"variant page_table_multiarch::PagingError::NotMapped\"><code>Err(PagingError::NotMapped)</code></a> if the\nintermediate level tables of the mapping is not present.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.protect\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#105-116\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.protect\" class=\"fn\">protect</a>(\n    &amp;mut self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n    flags: <a class=\"struct\" href=\"page_table_entry/struct.MappingFlags.html\" title=\"struct page_table_entry::MappingFlags\">MappingFlags</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;(<a class=\"enum\" href=\"page_table_multiarch/enum.PageSize.html\" title=\"enum page_table_multiarch::PageSize\">PageSize</a>, <a class=\"struct\" href=\"page_table_multiarch/struct.TlbFlush.html\" title=\"struct page_table_multiarch::TlbFlush\">TlbFlush</a>&lt;M&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Updates the flags of the mapping starts with <code>vaddr</code>.</p>\n<p>Returns the page size of the mapping.</p>\n<p>Returns <a href=\"page_table_multiarch/enum.PagingError.html#variant.NotMapped\" title=\"variant page_table_multiarch::PagingError::NotMapped\"><code>Err(PagingError::NotMapped)</code></a> if the\nmapping is not present.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unmap\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#122-131\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.unmap\" class=\"fn\">unmap</a>(\n    &amp;mut self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;(PhysAddr, <a class=\"enum\" href=\"page_table_multiarch/enum.PageSize.html\" title=\"enum page_table_multiarch::PageSize\">PageSize</a>, <a class=\"struct\" href=\"page_table_multiarch/struct.TlbFlush.html\" title=\"struct page_table_multiarch::TlbFlush\">TlbFlush</a>&lt;M&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Unmaps the mapping starts with <code>vaddr</code>.</p>\n<p>Returns <a href=\"page_table_multiarch/enum.PagingError.html#variant.NotMapped\" title=\"variant page_table_multiarch::PagingError::NotMapped\"><code>Err(PagingError::NotMapped)</code></a> if the\nmapping is not present.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#140-147\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.query\" class=\"fn\">query</a>(\n    &amp;self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;(PhysAddr, <a class=\"struct\" href=\"page_table_entry/struct.MappingFlags.html\" title=\"struct page_table_entry::MappingFlags\">MappingFlags</a>, <a class=\"enum\" href=\"page_table_multiarch/enum.PageSize.html\" title=\"enum page_table_multiarch::PageSize\">PageSize</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Queries the result of the mapping starts with <code>vaddr</code>.</p>\n<p>Returns the physical address of the target frame, mapping flags, and\nthe page size.</p>\n<p>Returns <a href=\"page_table_multiarch/enum.PagingError.html#variant.NotMapped\" title=\"variant page_table_multiarch::PagingError::NotMapped\"><code>Err(PagingError::NotMapped)</code></a> if the\nmapping is not present.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_region\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#163-220\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.map_region\" class=\"fn\">map_region</a>(\n    &amp;mut self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n    get_paddr: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>) -&gt; PhysAddr,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>,\n    flags: <a class=\"struct\" href=\"page_table_entry/struct.MappingFlags.html\" title=\"struct page_table_entry::MappingFlags\">MappingFlags</a>,\n    allow_huge: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,\n    flush_tlb_by_page: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;<a class=\"struct\" href=\"page_table_multiarch/struct.TlbFlushAll.html\" title=\"struct page_table_multiarch::TlbFlushAll\">TlbFlushAll</a>&lt;M&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Maps a contiguous virtual memory region to a contiguous physical memory\nregion with the given mapping <code>flags</code>.</p>\n<p>The virtual and physical memory regions start with <code>vaddr</code> and <code>paddr</code>\nrespectively. The region size is <code>size</code>. The addresses and <code>size</code> must\nbe aligned to 4K, otherwise it will return <a href=\"page_table_multiarch/enum.PagingError.html#variant.NotAligned\" title=\"variant page_table_multiarch::PagingError::NotAligned\"><code>Err(PagingError::NotAligned)</code></a>.</p>\n<p>When <code>allow_huge</code> is true, it will try to map the region with huge pages\nif possible. Otherwise, it will map the region with 4K pages.</p>\n<p>When <code>flush_tlb_by_page</code> is true, it will flush the TLB immediately after\nmapping each page. Otherwise, the TLB flush should by handled by the caller.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unmap_region\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#229-260\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.unmap_region\" class=\"fn\">unmap_region</a>(\n    &amp;mut self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>,\n    flush_tlb_by_page: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;<a class=\"struct\" href=\"page_table_multiarch/struct.TlbFlushAll.html\" title=\"struct page_table_multiarch::TlbFlushAll\">TlbFlushAll</a>&lt;M&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Unmaps a contiguous virtual memory region.</p>\n<p>The region must be mapped before using <a href=\"page_table_multiarch/struct.PageTable64.html#method.map_region\" title=\"method page_table_multiarch::PageTable64::map_region\"><code>PageTable64::map_region</code></a>, or\nunexpected behaviors may occur. It can deal with huge pages automatically.</p>\n<p>When <code>flush_tlb_by_page</code> is true, it will flush the TLB immediately after\nmapping each page. Otherwise, the TLB flush should by handled by the caller.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.protect_region\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#269-302\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.protect_region\" class=\"fn\">protect_region</a>(\n    &amp;mut self,\n    vaddr: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>,\n    flags: <a class=\"struct\" href=\"page_table_entry/struct.MappingFlags.html\" title=\"struct page_table_entry::MappingFlags\">MappingFlags</a>,\n    flush_tlb_by_page: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a>&lt;<a class=\"struct\" href=\"page_table_multiarch/struct.TlbFlushAll.html\" title=\"struct page_table_multiarch::TlbFlushAll\">TlbFlushAll</a>&lt;M&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Updates mapping flags of a contiguous virtual memory region.</p>\n<p>The region must be mapped before using <a href=\"page_table_multiarch/struct.PageTable64.html#method.map_region\" title=\"method page_table_multiarch::PageTable64::map_region\"><code>PageTable64::map_region</code></a>, or\nunexpected behaviors may occur. It can deal with huge pages automatically.</p>\n<p>When <code>flush_tlb_by_page</code> is true, it will flush the TLB immediately after\nmapping each page. Otherwise, the TLB flush should by handled by the caller.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#316-328\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.walk\" class=\"fn\">walk</a>&lt;F&gt;(\n    &amp;self,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>,\n    pre_func: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;F</a>&gt;,\n    post_func: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;F</a>&gt;,\n) -&gt; <a class=\"type\" href=\"page_table_multiarch/type.PagingResult.html\" title=\"type page_table_multiarch::PagingResult\">PagingResult</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>, M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;PTE</a>),</div></h4></section></summary><div class=\"docblock\"><p>Walk the page table recursively.</p>\n<p>When reaching a page table entry, call <code>pre_func</code> and <code>post_func</code> on the\nentry if they are provided. The max number of enumerations in one table\nis limited by <code>limit</code>. <code>pre_func</code> and <code>post_func</code> are called before and\nafter recursively walking the page table.</p>\n<p>The arguments of <code>*_func</code> are:</p>\n<ul>\n<li>Current level (starts with <code>0</code>): <code>usize</code></li>\n<li>The index of the entry in the current-level table: <code>usize</code></li>\n<li>The virtual address that is mapped to the entry: <code>M::VirtAddr</code></li>\n<li>The reference of the entry: <a href=\"page_table_entry/trait.GenericPTE.html\" title=\"trait page_table_entry::GenericPTE\"><code>&amp;PTE</code></a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from\" class=\"method\"><a class=\"src rightside\" href=\"src/page_table_multiarch/bits64.rs.html#332-356\">Source</a><h4 class=\"code-header\">pub fn <a href=\"page_table_multiarch/struct.PageTable64.html#tymethod.copy_from\" class=\"fn\">copy_from</a>(&amp;mut self, other: &amp;Self, start: M::<a class=\"associatedtype\" href=\"page_table_multiarch/trait.PagingMetaData.html#associatedtype.VirtAddr\" title=\"type page_table_multiarch::PagingMetaData::VirtAddr\">VirtAddr</a>, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>copy-from</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Copy entries from another page table within the given virtual memory range.</p>\n</div></details></div></details>",0,"page_table_multiarch::arch::x86_64::X64PageTable","page_table_multiarch::arch::riscv::Sv39PageTable","page_table_multiarch::arch::riscv::Sv48PageTable","page_table_multiarch::arch::aarch64::A64PageTable","page_table_multiarch::arch::loongarch64::LA64PageTable"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[22084]}